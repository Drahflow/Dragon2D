def LoadTileset(UIElement e, XMLUI loader) {
	puts(loader.GetElementById("tilesetName").GetName());
	GlobalTileset("editTileset").Load(loader.GetElementById("tilesetName").GetName());
	GlobalSprite("editTilesetSprite").UseTexture(GlobalTileset("editTileset").GetTexture());
	loader.GetElementById("tileTex").SetName(GlobalTileset("editTileset").GetTexture());
}

def GenerateTilePattern(UIElement e, XMLUI loader) {
	GlobalTileset("editTileset").ResetTiles();
	var w = StrToInt(loader.GetElementById("patternW").GetName());
	var h = StrToInt(loader.GetElementById("patternH").GetName());
	for(auto y=0; y<h; ++y) {
		for(auto x=0; x<w; ++x) {
				GlobalTileset("editTileset").SetTile(y*w+x, vec4((1.0/w)*x, (1.0/h)*y,1.0/w, 1.0/h));
		}
	}
}

def SetActiveTile(UIElement e, XMLUI loader)
{
	var tId = StrToInt(loader.GetElementById("tileId").GetName());
	var tPos = GlobalTileset("editTileset").GetTile(tId);
	loader.GetElementById("tileX").SetName("x:"+to_string(tPos.x));
	loader.GetElementById("tileW").SetName("w:"+to_string(tPos.z));
	loader.GetElementById("tileY").SetName("y:"+to_string(tPos.y));
	loader.GetElementById("tileH").SetName("h:"+to_string(tPos.w));
}

def SetTexture(UIElement e, XMLUI loader)
{
	GlobalTileset("editTileset").UseTexture(loader.GetElementById("tileTex").GetName());
	GlobalSprite("editTilesetSprite").UseTexture(GlobalTileset("editTileset").GetTexture());
}

def MouseSelect(UIElement e, XMLUI loader)
{
	var mpos = Mouseinfo();
	var mpos_scaled = vec4((mpos.x-0.5)*2.0, mpos.y, 0.0, 0.0);
	var tId = GlobalTileset("editTileset").GetTileAtTexturePosition(mpos_scaled);
	if ( tId >= 0 ) {
		var tPos = GlobalTileset("editTileset").GetTile(tId);
		var areaPos = vec4((tPos.x/2.0)+0.5, tPos.y, (tPos.z/2.0), tPos.w);
		loader.GetElementById("selectedArea").SetPosition(areaPos);
		loader.GetElementById("selectedArea").SetHidden(false);
		loader.GetElementById("tileId").SetName(to_string(tId));
		SetActiveTile(e,loader);
	}
}

def SaveTileset(UIElement e, XMLUI loader) {
	GlobalTileset("editTileset").SetName(loader.GetElementById("tilesetName").GetName());
	GlobalTileset("editTileset").Save();
}

def IncStepSize(UIElement e, XMLUI loader)
{
	var s = StrToFloat(loader.GetElementById("stepSize").GetName());
	s = s*10.0;
	puts('b');
	loader.GetElementById("stepSize").SetName(to_string(s));
}

def DecStepSize(UIElement e, XMLUI loader)
{
	var s = StrToFloat(loader.GetElementById("stepSize").GetName());
	s = s/10.0;
	puts('a');
	loader.GetElementById("stepSize").SetName(to_string(s));
}

def IncTileX(UIElement e, XMLUI loader)
{
	var x = loader.GetElementById("tileX");
	var s = StrToFloat(x.GetName());
	s = s*10.0;
	puts('b');
	x.SetName(to_string(s));
}

def DecTileX(UIElement e, XMLUI loader)
{
	var x = loader.GetElementById("tileX");
	var s = StrToFloat(x.GetName());
	s = s/10.0;
	puts('a');
	x.SetName(to_string(s));
}

def LoadTilesetEditor() {
	var tileEditor = NewUiObject();
	tileEditor.Load("tileEditor");
	tileEditor.AddCallback("loadTileset", LoadTileset);
	tileEditor.AddCallback("saveTileset", SaveTileset);
	tileEditor.AddCallback("generatePattern", GenerateTilePattern);
	tileEditor.AddCallback("mouseSelect", MouseSelect);
	tileEditor.AddCallback("createId", SetActiveTile);
	tileEditor.AddCallback("setTexture", SetTexture);
	tileEditor.AddCallback("incStepSize", IncStepSize);
	tileEditor.AddCallback("decStepSize", DecStepSize);
	tileEditor.AddCallback("incTileX", IncTileX);
	tileEditor.AddCallback("decTileX", DecTileX);
	//tileEditor.AddCallback("incTileY", IncTileY);
	//tileEditor.AddCallback("decTileY", DecTileY);
	//tileEditor.AddCallback("incTileW", IncTileW);
	//tileEditor.AddCallback("decTileW", DecTileW);
	//tileEditor.AddCallback("incTileH", IncTileH);
	//tileEditor.AddCallback("decTileH", DecTileH);
	GlobalSprite("editTilesetSprite").SetPosition(vec4(0.5,0.0,0.5,1.0));
	CurrentManager().Add(GlobalSprite("editTilesetSprite"));
	CurrentManager().Add(tileEditor);
}